<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>